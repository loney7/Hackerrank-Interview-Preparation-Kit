#include <bits/stdc++.h>

using namespace std;

// Complete the maxRegion function below.
bool isValid(int i, int j, int x, int y) {
    return (i>=0 && i <x && j>=0 && j<y);
}
int dfs(int i, int j, vector<vector<int>> grid, 
        vector<vector<int>> &visited) {
    int n = grid.size();
    int m = grid[0].size();
    visited[i][j] = 1; 
    int count = 1;
    for (int k = -1;k<=1;k++) {
        for(int l = -1;l<=1;l++) {
            if(isValid(i+k, j+l, n, m)) {
                 if(!visited[i+k][j+l] && grid[i+k][j+l] == 1) {
                     count = count + dfs(i+k, j+l, grid, visited);
                 }
                
            }
           
        }
    }
    return count;
}
int maxRegion(vector<vector<int>> grid) {
    int n = grid.size();
    int m = grid[0].size();
    vector<vector<int>> visited(n, vector<int>(m, 0));
    int maxCount = 0;
    for(int i = 0; i<n;i++) {
        for (int j = 0;j<m;j++) {
            if(!visited[i][j] && grid[i][j] == 1) {
                // if you haven't visited the vertex 
                // run a dfs 
                maxCount = max(maxCount, dfs(i,j,grid,visited));
            }        
        }
    }
    
    return maxCount;

}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    int n;
    cin >> n;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    int m;
    cin >> m;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    vector<vector<int>> grid(n);
    for (int i = 0; i < n; i++) {
        grid[i].resize(m);

        for (int j = 0; j < m; j++) {
            cin >> grid[i][j];
        }

        cin.ignore(numeric_limits<streamsize>::max(), '\n');
    }

    int res = maxRegion(grid);

    fout << res << "\n";

    fout.close();

    return 0;
}
